{"version":3,"sources":["../src/haproxy_ctrl.js"],"names":[],"mappings":"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","file":"haproxy_ctrl.js","sourcesContent":["import {PanelCtrl} from 'app/plugins/sdk';\nimport moment from 'moment';\nimport _ from 'lodash';\nimport './css/clock-panel.css!';\n\nimport { parseStatLine, parseStatsData } from './haproxy';\n\nconst panelDefaults = {\n  clockType: '24 hour',\n  offsetFromUtc: null,\n  offsetFromUtcMinutes: null,\n  bgColor: null,\n  timeSettings: {\n    customFormat: 'HH:mm:ss',\n    fontSize: '60px',\n    fontWeight: 'normal'\n  },\n  haproxySettings: {\n    url: '/stats/;csv',\n    backendName: '',\n    serverName: '',\n    showStatus: true,\n    showWeight: true\n  }\n};\n\nexport class HaproxyCtrl extends PanelCtrl {\n  constructor($scope, $injector) {\n    super($scope, $injector);\n    _.defaults(this.panel, panelDefaults);\n    _.defaults(this.panel.timeSettings, panelDefaults.timeSettings);\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\n    this.update();\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Options', 'public/plugins/grafana-haproxy-panel/editor.html', 2);\n  }\n\n  onPanelTeardown() {\n    this.$timeout.cancel(this.nextTickPromise);\n  }\n\n  update() {\n    this.renderPanel();\n    this.nextTickPromise = this.$timeout(this.update.bind(this), 1000);\n  }\n\n  renderPanel() {\n    $.get(this.panel.haproxySettings.url)\n    .done(this.renderStats.bind(this))\n    .done(this.renderTime.bind(this))\n    .fail((error) => { this.error = error; });\n\n    this.render();\n  }\n\n  renderStats(data) {\n    this.error = void 0;\n    var statsData = parseStatsData(data);\n    const svNameToMatch = this.panel.haproxySettings.serverName;\n    var backend = statsData.find(d => d.svname === svNameToMatch);\n\n    this.server = backend ? backend : {\n      svname: this.panel.haproxySettings.serverName,\n      status: 'Not found in Haproxy stats output'\n    };\n  }\n\n  renderTime() {\n    let now;\n\n    if (this.panel.offsetFromUtc && this.panel.offsetFromUtcMinutes) {\n      const offsetInMinutes = (parseInt(this.panel.offsetFromUtc, 10) * 60) + parseInt(this.panel.offsetFromUtcMinutes, 10);\n      now = moment().utcOffset(offsetInMinutes);\n    } else if (this.panel.offsetFromUtc && !this.panel.offsetFromUtcMinutes) {\n      now = moment().utcOffset(parseInt(this.panel.offsetFromUtc, 10));\n    } else {\n      now = moment();\n    }\n\n    this.time = now.format(this.getTimeFormat());\n  }\n\n  getTimeFormat() {\n    if (this.panel.clockType === '24 hour') {\n      return 'HH:mm:ss';\n    }\n\n    if (this.panel.clockType === '12 hour') {\n      return 'h:mm:ss A';\n    }\n\n    return this.panel.timeSettings.customFormat;\n  }\n\n  link(scope, elem) {\n    this.events.on('render', () => {\n      const $panelContainer = elem.find('.panel-container');\n\n      if (this.panel.bgColor) {\n        $panelContainer.css('background-color', this.panel.bgColor);\n      } else {\n        $panelContainer.css('background-color', '');\n      }\n    });\n  }\n}\n\nHaproxyCtrl.templateUrl = 'module.html';\n"]}